[
  // rename root to flow
  {
    "operation": "shift",
    "spec": {
      "root": "flows"
    }
  },


  // shift flow-parts (start, einführung,...) directly under flows --> flatten
  {
    "operation": "shift",
    "spec": {
      "flows": {
        "*": {
          "*": "&2.&"
        }
      }
    }
  },

  // Big logic
  {
    "operation": "shift",
    "spec": {
      "flows": {
        "*": {
          "->": "&2.init.link",
          "*": {
            "^*": {
              "$": "&4.&3.message",
              "#text": "&4.&3.type"
            },
            "->": "&3.&2.link",
            "\\#": "&3.&2.comment",
            "*": {
              "\\#": "&4.&3.comment",
              "^\\$*": {
                "$": "&5.&4.type"
              },
              "c-*": {
                "*": {
                  "->": "&6.&5.temp[]"
                }
              },
              "^*": {
                "$": "&5.&4.links[]"
              }
            },
            "end": {
              "$": "&4.&3.link"
            }
          }
        }
      }
    }
  },

  // Set default type = null if type does not exist
  {
    "operation": "modify-default-beta",
    "spec": {
      // If c does not exists add the c with default value as null
      "flows": {
        "*": {
          "type": "null"
        }
      }
    }
  },

  // Set type to button, if flow does links but no custom keyword
  {
    "operation": "shift",
    "spec": {
      "flows": {
        "*": {
          "links": {
            "@(1,type)": {
              "null": {
                "#button": "&5.&4.type"
              },
              "*": {
                "@(3,type)": "&5.&4.type"
              }
            },
            "@": "&3.&2.&"
          },
          "*": "&2.&1.&"
        }
      }
    }
  },
  {
    "operation": "cardinality",
    "spec": {
      "*": {
        "*": {
          "type": "ONE"
        }
      }
    }
  },

  // Arrays miteinander kombinieren
  {
    "operation": "shift",
    "spec": {
      "flows": {
        "*": {
          "links": {
            "*": {
              "@": "&4.&3.links.[&].result",
              "@(2,temp[&])": "&4.&3.links.[&].link"
            }
          },
          "*": "&2.&1.&"
        }
      }
    }
  },

  // Flatten links array and make result as new key of object
  {
    "operation": "shift",
    "spec": {
      "flows": {
        "*": {
          "*": "&2.&1.&",
          "links": {
            "*": {
              "result": {
                "*": {
                  "@": "&6.&5.&4.&1.&",
                  "@(2,link)": "&6.&5.&4.&1.link"
                }
              }
            }
          }
        }
      }
    }
  },

  // Löscht ^ aus den Values, message, type
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "flows": {
        "*": {
          "message_split": "=split('\\^',@(1,message))",
          "message": "=join('',@(1,message_split))",
          "type_split": "=split('\\^',@(1,type))",
          "type": "=join('',@(1,type_split))"
        }
      }
    }
  },

  // Löscht ^ aus dem Key der einzelnen Links-Objektn
  {
    "operation": "shift",
    "spec": {
      "flows": {
        "*": {
          "*": "&2.&1.&",
          "links": {
            "^*": "&3.&2.&1.&(0,1)"
          }
        }
      }
    }
  },

  // Löscht das temp array raus;
  // Löscht type von init flow raus
  // Löscht temporäre keys raus wie message_length, welche für den substring nötig waren
  {
    "operation": "remove",
    "spec": {
      "flows": {
        "init": {
          "type": ""
        },
        "*": {
          "temp": "",
          "message_split": "",
          "type_split": ""
        }
      }
    }
  },

  // Löscht alle null werte aus dem json (Bsp. im Ernährungsobject war noch ein Ernaährung: null, link: "linkname"
  {
    "operation": "modify-overwrite-beta",
    "spec": {
      "*": "=recursivelySquashNulls"
    }
  },

  // Sortiert alle Objecte nach namen
  {
    "operation": "sort",
    "spec": {
      "*": ""
    }
  }
]